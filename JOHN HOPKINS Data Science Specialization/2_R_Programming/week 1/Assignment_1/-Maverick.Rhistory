q[5]
vector()
q <- vector(5)
q <- vector(1:10)
q <- vector("numeric", length = 10)
q
dim(q)
length(q)
class(q)
q <- c("a", TRUE)
q
m <- matrix(nrow=2, ncol=3)
m
m <- matrix(1:6, nrow=2, ncol=3)
m
dim(m)
attributes(m
)
m1 <- 1:20
dim(m1) <- c(4,5)
m1
l <- list(1, "a", TRUE, 1 + 4i)
l
str(l)
# Definition of hand_vector
hand_vector <- c("Right", "Left", "Left", "Right", "Left")
# Convert hand_vector to a factor: hand_factor
hand_factor <- factor(hand_vector)
# Display the structure of hand_factor
str(hand_factor)
# Definition of hand_vector
hand_vector <- c("Right", "Left", "Left", "Right", "Left")
# Convert hand_vector to a factor: hand_factor
hand_factor <- factor(hand_vector)
# Display the structure of hand_factor
str(hand_factor)
levels("Left", "Right")
levels() <- c("Left", "Right")
levels <- c("Left", "Right")
str(hand_factor)
levels(hand_factor) <- c("Left", "Right")
str(hand_factor)
levels
levels(hand_factor) <- c("Right", "Left")
str(hand_factor)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
?matrix
y <- list("a", 1, TRUE)
x <- data.frame("a", 1, "TRUE")
dput(x, y)
dput("y.R", x, y)
?dput
dput(x, "y.R")
ls
ls()
dump(c("x", "y"), file = "y.R" )
str(file)
con <- url("http://www.topal.ch", "r")
x <- readLines(con)
head(x)
head(x, 50)
x <- matrix(1:6, 2, 3)
x
x[1, ]
y <- x[1, , drop = FALSE]
class(y)
z <- x[1, ]
class(z)
airquality[1:6, ]
good <- complete.cases(airquality)
good
airquality[good, ][1:6, ]
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
q <- rbind(x, y)
class(q)
x <- list(2, "a", "b", TRUE)
x[[2]]
q <- x[[2]]
class(q)
str(q)
x <- 1:4
y <- 2:3
q <- x + y
q
class(q)
x <- c(3, 5, 1, 10, 12, 6)
q <- x[x < 6] == 0
q
x
x[x %in% 1:5] <- 0
x
data <- read.csv("hw1_data.csv")
View(data)
data[1:2]
data[, c(1,2)]
data[c(1,2), ]
length(data)
nrow(data)
data[c(152,153), ]
data(47, )
data(c(47), )
data[c(47), ]
nrow(is.na(data[, 1]))
data[, 1]
data[, 1] == NA
data[, 1] & NA
data[!data.na(x), 1]
data[!is.na(data), 1]
subset <- data[, 1]
subset
subset[!is.na(subset)]
q <- subset[!is.na(subset)]
mean(q)
data$Ozone
data$Ozone > 31 & data.Temp > 90
data$Ozone > 31 & data$Temp > 90
data$Temp > 90
data$Ozone > 31
subsetOT <- data$Ozone > 31 & data$Temp > 90
good <- complete.cases(subsetOT)
good
nrow(subsetOT)
subsetOT
data[subsetOT > 1, ]
data[subsetOT > 0, ]
subset <-data[subsetOT > FALSE, ]
subset
good <- complete.cases(subset)
good
subsetOT[good, ][, subsetOT$Solar.R]
subsetOT$Solar.R
subsetOT[good, ][, 2]
class(subset)
subset[good, ][, 2]
mean(subset[good, ][, 2])
subsetM <- data$Month == 6
subsetM
subset <-data[subsetM > FALSE, ]
subset
good <- complete.cases(subset)
subset[good, ][, 4]
subset[, ][, 4]
mean(subset[, ][, 4])
subsetM <- data$Month == 5
subsetM
subset <-data[subsetM > FALSE, ]
subset
max(subset$Ozone)
subset$Ozone
debugSource('C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 1/Assignment_1/main_complete.R')
View(dataframe_TC1)
View(dataframe_TC1)
View(dataframe_TC2)
View(dataframe_TC3)
View(dataframe_TC3)
View(dataframe_TC2)
View(dataframe_TC4)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
submit()
submit()
submit()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
sapply(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c( z , 555)
c( z , 555, z)
z * 2 + 100
my_sqrt <- sqrt(abs(z-1)
)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
testdir <- dir.create()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
Sys.Date()
mean(c(2, 4, 5))
submit()
submit()
library(swirl)
swirl()
submit()
rm(list=ls())
swirl()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
reminder(5)
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]})
evaluate(function(x){x[1]}, 6)
evaluate(function(c(8, 4, 0)){x[1]}, 6)
x <- c(8, 4, 0)
evaluate(function(x){x[1]}, 6)
info()
play()
x <- c(8, 4, 0)
evaluate(function(x){x[1]}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
nxt()
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
play()
telegram <- function(start = "START", arg1, arg2, stp = "STOP"){
paste(start, arg1, arg2, stp, sep = " " )
}
telegram("Good", "morning")
telegram <- function(arg1, arg2, strt = "START", stp = "STOP"){
paste(strt, arg1, arg2, stp, sep = " " )
}
telegram("Good", "morning")
nxt()
submit()
play()
telegram <- function(strt = "START", stp = "STOP", arg1, arg2){
paste(strt, arg1, arg2, stp, sep = " " )
}
telegram("Good", "morning")
telegram <- function(strt = "START", stp = "STOP", arg1 = arg1, arg2 = arg2){
paste(strt, arg1, arg2, stp, sep = " " )
}
telegram("Good", "morning")
telegram <- function(arg1, arg2){
paste("START", arg1, arg2, "STOP", sep = " " )
}
telegram("Good", "morning")
telegram("Good", "morning")
nxt()
submit()
play()
?paste
telegram <- function(arg1, arg2){
paste("START", arg1, arg2, "STOP", sep = " " )
}
telegram("Du", "Depp")
nxt()
play()
telegram <- function(arg1, arg2){
paste("START", arg1, arg2, "STOP", sep = " ", colapse = NULL )
}
telegram("Du", "Depp")
nxt()
submit()
nxt()
submit()
info()
skip()
telegram("Hello", "Fellow")
submit()
play()
args <- list(place = "USA", adjective = "fast", noun = "Summer")
mad_libs <- function(args){
# Do your argument unpacking here!
place <- args$place
adjective <- args$adjective
noun <- args$noun
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs(args)
nxt()
submit()
play()
args <- list(place = "USA", adjective = "fast", noun = "Summer")
args
mad_libs <- function(args){
# Do your argument unpacking here!
place <- args$place
adjective <- args$adjective
noun <- args$noun
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs(args)
nxt()
submit()
skip()
mad_libs("Depp", "Du", "Fudi")
play()
"Good" %p% "Job!"
"%p%" <- function(value){ # Remember to add arguments!
retvalue <- value
retvalue
}
"Good" %p% "Job!"
"%p%" <- function(value1, value2){ # Remember to add arguments!
retvalue <- value
retvalue
}
"%p%" <- function(value){ # Remember to add arguments!
paste(value1, value2, sep"")
}
"%p%" <- function(value){ # Remember to add arguments!
paste(value1, value2, sep"")
}
"%p%" <- function(value){ # Remember to add arguments!
paste(value1, value2, sep="")
}
"Good" %p% "Job!"
"%p%" <- function(value){ # Remember to add arguments!
value
}
"Good" %p% "Job!"
nxt()
skip()
"I" %p% "love" "R!"
"I" %p% "love"
"I" %p% "love" %p% "R!"
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8) )
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("a", "b", "c", "d")
submit()
mad_libs("Depp", "Du", "Fudi")
submit()
"I" %p% "love" %p% "R!"
search()
multiply <- function (X, y) {}
multiply <- function (X, y) {
x*2 - x + y / z
}
z <- 5
multiply(10)
multiply(10, 7)
multiply <- function (X, y) {
(x*2 - x) + (y / z)
}
multiply(10, 7)
multiply <- function (X, y) {
(x^2 - x) + (y / z)
}
z <- 2
multiply(10, 8)
10^2
(x^2 - x) + (y / z)
debugSource('C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 1/Assignment_1/main_correlation.R')
debugSource('C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 1/Assignment_1/main_correlation.R')
corr(directory, 150);
debugSource('C:/Users/bhunkeler/OneDrive/Dokumente/Coursera_Courses/Data Science/002_R Programming/week 1/Assignment_1/main_correlation.R')
head(correlation_TC1)
summary(correlation_TC1)
head(correlation_TC2)
summary(correlation_TC2)
length(correlation_TC2)
head(correlation_TC4)
summary(correlation_TC4)
length(correlation_TC4)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
date()
x <- as.Date("01.101970")
POSIXct
POSIXlt
x <- as.Date("01.01.1970")
x <- as.Date("1970-01-01")
Sys.time()
Sys.timezone()
as.POSIXct(x)
